import*as THREE from"../build/three.module.js";import{Line2}from"../jsm/lines/Line2.js";import{LineGeometry}from"../jsm/lines/LineGeometry.js";import{LineMaterial}from"../jsm/lines/LineMaterial.js";import{OrbitControls}from"../jsm/controls/OrbitControls.js";import{LensflareElement,Lensflare}from"../jsm/objects/Lensflare.js";export default class ThreeEarth{constructor({domElement:e,option:t,border:i}){this.domElement=e,this.option=t,this.border=i,this.scene,this.camera,this.light={ambientLight:null,directionalLight:null},this.renderer,this.animationFrameId=null,this.textureLoader=new THREE.TextureLoader,this.earthCloudCover,this.earthGroup=new THREE.Group,this.starsParticleSystem,this.BeamLightWaveMesh=[],this.FlightLineWaveMesh=[],this.gridHelperName="网格辅助",this.axesHelperName="坐标辅助",this.lightBeamScatterSpeed=.007}init(){return this.initScene(),this.initCamera(),this.initLight(),this.initRenderer(),this.initControls(),this.initGridHelper(),this.render(),this.initEarth(),this.initSunshine(),this.initStarrySkyBackground(),this.scene.add(this.earthGroup),this}initScene(){this.scene=new THREE.Scene,this.scene.fog=new THREE.Fog(133412,200,1e3)}initCamera(){this.camera=new THREE.PerspectiveCamera(45,this.domElement.offsetWidth/this.domElement.offsetHeight,.1,1e4),this.camera.position.set(10,10,10),this.camera.lookAt(0,0,0)}initLight(){const e=this.option.light.directionalLight;this.light.directionalLight=new THREE.DirectionalLight(e.color,e.intensity),this.light.directionalLight.position.set(e.x,e.y,e.z),this.light.directionalLight.lookAt(0,0,0),this.initDirectionalLightHelper();const t=this.option.light.ambientLight;this.light.ambientLight=new THREE.AmbientLight(t.color,t.intensity),this.scene.add(this.light.ambientLight,this.light.directionalLight)}setDirectionalLight(e){this.light.directionalLight.position.set(e.x,e.y,e.z),this.light.directionalLight.lookAt(0,0,0),this.light.directionalLight.color.set(e.color),this.light.directionalLight.intensity=e.intensity;const t=this.scene.getObjectByName("directionalLightHelper");t&&this.scene.remove(t),e.helper.show&&this.initDirectionalLightHelper()}initDirectionalLightHelper(){const e=this.option.light.directionalLight;e.helper.show&&(this.directionalLightHelper=new THREE.DirectionalLightHelper(this.light.directionalLight,e.helper.size,e.helper.color),this.directionalLightHelper.name="directionalLightHelper",this.scene.add(this.directionalLightHelper))}setAmbientLight(e){this.light.ambientLight.color.set(e.color),this.light.ambientLight.intensity=e.intensity}initRenderer(){this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setSize(this.domElement.offsetWidth,this.domElement.offsetHeight),this.renderer.setClearAlpha(0),this.domElement.appendChild(this.renderer.domElement),console.log("当前THREE版本号：",THREE.REVISION)}initControls(){this.controls=new OrbitControls(this.camera,this.renderer.domElement),this.controls.enableZoom=!0,this.controls.autoRotate=!1,this.controls.autoRotateSpeed=2,this.controls.minDistance=5,this.controls.maxDistance=100,this.controls.enablePan=!0,this.controls.enableKeys=!1,this.controls.update()}initGridHelper(e){e&&(this.option.gridHelper=e),this.option.gridHelper.show&&this.openGridHelper(),this.option.gridHelper.show||this.closeGridHelper()}openGridHelper(){if(this.option.gridHelper.show){const e=this.option.gridHelper.width||500,t=this.option.gridHelper.height||500,i=this.option.gridHelper.xColor||16777215,r=this.option.gridHelper.yColor||16777215;this.option.gridHelper.material=this.option.gridHelper.material||{};const o=this.option.gridHelper.material.opacity||.5,s=this.option.gridHelper.material.transparent||!0,a=new THREE.GridHelper(e,t,i,r);a.material.opacity=o,a.material.transparent=s,a.name=this.gridHelperName,this.closeGridHelper(),this.scene.add(a)}}closeGridHelper(){const e=this.scene.getObjectByName(this.gridHelperName);e&&this.scene.remove(e)}initAxesHelper(e){e&&(this.option.axesHelper=e),this.option.axesHelper.show&&this.openAxesHelper(),this.option.axesHelper.show||this.closeAxesHelper()}openAxesHelper(){if(this.option.axesHelper.show){const e=this.option.axesHelper.size||100,t=new THREE.AxesHelper(e);t.name=this.axesHelperName,this.closeAxesHelper(),this.scene.add(t)}}closeAxesHelper(){const e=this.scene.getObjectByName(this.axesHelperName);e&&this.scene.remove(e)}resize(){this.renderer.setSize(this.domElement.offsetWidth,this.domElement.offsetHeight),this.camera.aspect=this.domElement.offsetWidth/this.domElement.offsetHeight,this.camera.updateProjectionMatrix()}render(){this.starsParticleSystem&&(this.starsParticleSystem.rotation.y=this.starsParticleSystem.rotation.y+1e-4),this.earthGroup&&(this.earthGroup.rotation.y=this.earthGroup.rotation.y+1e-4*this.option.earth.speed),this.earthCloudCover&&(this.earthCloudCover.rotation.y=this.earthCloudCover.rotation.y+2e-4),this.BeamLightWaveMesh.length&&this.BeamLightWaveMesh.forEach(e=>{e._s+=this.lightBeamScatterSpeed,e.scale.set(e.size*e._s,e.size*e._s,e.size*e._s),e._s<=1.5?e.material.opacity=2*(e._s-1):e._s>1.5&&e._s<=2?e.material.opacity=1-2*(e._s-1.5):e._s=1}),this.FlightLineWaveMesh.length&&this.FlightLineWaveMesh.forEach(e=>{e._s+=.007,e.scale.set(e.size*e._s,e.size*e._s,e.size*e._s),e._s<=1.5?e.material.opacity=2*(e._s-1):e._s>1.5&&e._s<=2?e.material.opacity=1-2*(e._s-1.5):e._s=1}),this.animationFrameId=requestAnimationFrame(this.render.bind(this)),this.renderer.clear(),this.renderer.render(this.scene,this.camera)}dispose(){try{cancelAnimationFrame(this.animationFrameId),this.camera=null,this.scene.traverse(e=>{e.material&&e.material.dispose(),e.geometry&&e.geometry.dispose(),e=null}),this.domElement.innerHTML="",this.renderer.forceContextLoss(),this.renderer.dispose(),this.scene.clear(),this.scene=null,this.camera=null,this.controls=null,this.renderer.domElement=null,this.renderer=null,console.log("clearScene")}catch(e){console.log("ERROR ：clearScene")}}initEarth(){const e=this.earthGroup.getObjectByName("Earth");e&&this.earthGroup.remove(e);const t=new THREE.SphereGeometry(.1*this.option.earth.radius,this.option.earth.subdivision,this.option.earth.subdivision);var i=null;if(this.option.earth.textureShow){const e=this.textureLoader.load(this.option.earth.texture);i=new THREE.MeshStandardMaterial({map:e,side:THREE.DoubleSide,transparent:!0,opacity:this.option.earth.opacity,wireframe:this.option.earth.wireframe})}else i=new THREE.MeshStandardMaterial({color:this.option.earth.color,side:THREE.DoubleSide,transparent:!0,opacity:this.option.earth.opacity,wireframe:this.option.earth.wireframe});const r=new THREE.Mesh(t,i);r.name="Earth",this.earthGroup.add(r),this.earthGroup.rotation.set(0,3.6,0),this.initEarthBorders(),console.log("初始化地球",this.earthGroup.children)}initEarthBorders(){this.option.borders.forEach(e=>{this.initGeoJsonMapData(this.border[e.key],{show:e.show,key:e.key,line:{color:e.color,lineWidth:e.lineWidth,opacity:e.opacity}})}),this.initEarthAperture()}initEarthAperture(){const e=this.scene.getObjectByName("earthApertureSprite");if(e&&this.scene.remove(e),this.option.aperture.show){const e=this.textureLoader.load(this.option.aperture.texture),t=new THREE.SpriteMaterial({map:e,transparent:!0,color:this.option.aperture.color||"red",opacity:this.option.aperture.opacity,depthWrite:!1}),i=new THREE.Sprite(t);i.scale.set(.1*this.option.earth.radius*3,.1*this.option.earth.radius*3,1),i.name="earthApertureSprite",this.scene.add(i)}this.initEarthCloudCover()}initEarthCloudCover(){const e=this.earthGroup.getObjectByName("CloudCover");if(e&&this.earthGroup.remove(e),this.option.cloud.show){const e=this.textureLoader.load(this.option.cloud.texture),t=new THREE.SphereGeometry(.1*this.option.earth.radius+.1,100,100),i=new THREE.MeshStandardMaterial({map:e,transparent:!0,opacity:this.option.cloud.opacity});this.earthCloudCover=new THREE.Mesh(t,i),this.earthCloudCover.name="CloudCover",this.earthGroup.add(this.earthCloudCover)}}initSunshine(){const e=this.light.directionalLight.getObjectByName("Sunshine");if(e&&this.light.directionalLight.remove(e),this.option.sunshine.show){const e=this.textureLoader.load(this.option.sunshine.texture),t=new Lensflare;t.addElement(new LensflareElement(e,this.option.sunshine.size,0)),t.name="Sunshine",this.light.directionalLight.add(t)}}initStarrySkyBackground(){const e=this.scene.getObjectByName("starsParticleSystem");if(e&&this.scene.remove(e),this.option.starrysky.show){const e=this.textureLoader.load(this.option.starrysky.texture),i=[],r=[],o=new THREE.BufferGeometry;for(var t=0;t<this.option.starrysky.number;t++){const e=new THREE.Vector3;e.x=2*Math.random()-1,e.y=2*Math.random()-1,e.z=2*Math.random()-1,i.push(e.x,e.y,e.z);const t=new THREE.Color;t.setHSL(.2*Math.random()+.5,.55,.25*Math.random()+.55),r.push(t.r,t.g,t.b)}o.setAttribute("position",new THREE.Float32BufferAttribute(i,3)),o.setAttribute("color",new THREE.Float32BufferAttribute(r,3));const s=new THREE.PointsMaterial({map:e,size:1,transparent:!0,opacity:1,vertexColors:!0,blending:THREE.AdditiveBlending,sizeAttenuation:!0});this.starsParticleSystem=new THREE.Points(o,s),this.starsParticleSystem.scale.set(300,300,300),this.starsParticleSystem.name="starsParticleSystem",this.scene.add(this.starsParticleSystem)}}initGeoJsonMapData(e,t){const i=this.earthGroup.getObjectByName(t.key);if(i&&this.earthGroup.remove(i),t.show){const i=new THREE.Group;i.name=t.key,e.features.forEach(e=>{const r=e.geometry.coordinates,o=new THREE.Group;o.name=`区域组-${e.properties.name}`;const s=new THREE.Group;s.name="描边线段组";const a=new THREE.Group;a.name="地图板块组",r.forEach(e=>{var i=!1,r=[];e.forEach((e,o)=>{if(e[o]instanceof Array){const i=e.map(e=>this.lglt2xyz(...e,0));s.add(this.drawMapStrokeV2(i,t.line))}else i=!0,r.push(this.lglt2xyz(...e,0))}),i&&s.add(this.drawMapStrokeV2(r,t.line))}),o.add(s,a),i.add(o)}),this.earthGroup.add(i)}}drawMapAreaMesh(e){const t=new THREE.Shape;t.setFromPoints(e);const i=new THREE.ExtrudeGeometry(t,{depth:.5,bevelEnabled:!1}),r=new THREE.MeshPhongMaterial({color:"#ffffff",transparent:!0,opacity:1});return new THREE.Mesh(i,r)}drawMapStroke(e){const t=[];e.forEach(({x:e,y:i,z:r})=>t.push(e,i,r));const i=new THREE.BufferGeometry;i.setAttribute("position",new THREE.Float32BufferAttribute(t,3));const r=new THREE.LineDashedMaterial({transparent:!0,color:"#fe6d9d",opacity:1});return new THREE.Line(i,r)}drawMapStrokeV2(e,t){const i=[];e.forEach(({x:e,y:t,z:r})=>i.push(e,t,r));const r=new LineGeometry;r.setPositions(i);const o=new LineMaterial({transparent:!0,color:t.color||"#fe6d9d",linewidth:.001*t.lineWidth||.0015,opacity:t.opacity||1});return new Line2(r,o)}clearWidget(e){const t=this.earthGroup.getObjectByName("lightBeamScatter_"+e);t&&this.earthGroup.remove(t);const i=this.earthGroup.getObjectByName("flightLine_"+e);i&&this.earthGroup.remove(i)}initLightBeamScatter(e,t,i){const r=this.earthGroup.getObjectByName("lightBeamScatter_"+t);r&&this.earthGroup.remove(r);const o=new THREE.Group,s=.01*i.radius,a=(new THREE.TextureLoader).load(i.material.lightColumnTexture),n=(new THREE.TextureLoader).load(i.material.calloutTexture),h=(new THREE.TextureLoader).load(i.material.calloutApertureTexture);this.lightBeamScatterSpeed=i.speed;const l=i.material.color||"red",c=i.material.opacity||1;e.forEach(e=>{const[t,r,d]=this.lglt2xyz(e.value[0],e.value[1],.1),p=new THREE.Group;const E=function(e){var t=new THREE.PlaneBufferGeometry(1,1);t.rotateX(Math.PI),t.translate(0,0,.1*e/2);var i=new THREE.MeshBasicMaterial({color:l,opacity:c,map:n,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),r=new THREE.Mesh(t,i),o=e*s;return r.scale.set(o,o,o),r}(.1*this.option.earth.radius),m=function(e){const t=new THREE.PlaneGeometry(e*(s+.03),e*i.baseHeight);t.rotateX(Math.PI/2),t.translate(0,0,e*i.baseHeight*.5/2);const r=new THREE.MeshBasicMaterial({map:a,color:l,opacity:c,transparent:!0,side:THREE.DoubleSide,depthWrite:!1});return new THREE.Mesh(t,r)}(.1*this.option.earth.radius),u=function(e){var t=new THREE.PlaneBufferGeometry(1,1);t.rotateX(Math.PI),t.translate(0,0,.1*e/2);var i=new THREE.MeshBasicMaterial({color:l,opacity:c,map:h,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),r=new THREE.Mesh(t,i),o=e*s+.02;return r.scale.set(o,o,o),r.size=o,r._s=1*Math.random()+1,r}(.1*this.option.earth.radius);this.BeamLightWaveMesh.push(u),p.add(m,m.clone().rotateZ(Math.PI/2),E,u),p.position.set(t,r,d);const H=new THREE.Vector3(t,r,d).normalize(),g=new THREE.Vector3(0,0,1);p.quaternion.setFromUnitVectors(g,H),o.add(p)}),o.name="lightBeamScatter_"+t,this.earthGroup.add(o)}initFlightLine(e,t,i){const r=this.earthGroup.getObjectByName("flightLine_"+t);r&&this.earthGroup.remove(r);const o=new THREE.Group,s=(new THREE.TextureLoader).load(i.scatterStart.calloutTexture),a=(new THREE.TextureLoader).load(i.scatterStart.calloutApertureTexture),n=(new THREE.TextureLoader).load(i.scatterEnd.calloutTexture),h=(new THREE.TextureLoader).load(i.scatterEnd.calloutApertureTexture);e.forEach(e=>{const t=this.lglt2xyz(e.coords[0][0],e.coords[0][1],.1),r=this.lglt2xyz(e.coords[1][0],e.coords[1][1],.1);o.add((()=>{const[e,o,s,a]=this.getBezierCurveVPositions(t,r),n=new THREE.CubicBezierCurve3(e,o,s,a).getSpacedPoints(100),h=[];for(var l=0;l<n.length;l++)h.push(n[l].x,n[l].y,n[l].z);const c=new LineGeometry;c.setPositions(h);const d=new LineMaterial({color:i.line.color,linewidth:.001*i.line.width,dashed:!1,transparent:!0,opacity:i.line.opacity});return new Line2(c,d)})());const l=(e,t,i)=>{var r=new THREE.PlaneBufferGeometry(1,1);r.rotateX(Math.PI);var o=new THREE.MeshBasicMaterial({color:t.color,opacity:t.opacity,map:i,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),s=new THREE.Mesh(r,o),a=.002*e*t.size;return s.scale.set(a,a,a),s},c=(e,t,i)=>{var r=new THREE.PlaneBufferGeometry(1,1);r.rotateX(Math.PI);var o=new THREE.MeshBasicMaterial({color:t.color,opacity:t.opacity,map:i,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),s=new THREE.Mesh(r,o),a=.003*e*t.size;return s.scale.set(a,a,a),s.size=a,s._s=1*Math.random()+1,s},d=new THREE.Group,p=new THREE.Group,E=l(this.option.earth.radius,i.scatterStart,s),m=c(this.option.earth.radius,i.scatterStart,a);d.add(E,m),d.position.set(t.x,t.y,t.z);const u=l(this.option.earth.radius,i.scatterEnd,n),H=c(this.option.earth.radius,i.scatterEnd,h);p.add(u,H),p.position.set(r.x,r.y,r.z),this.FlightLineWaveMesh.push(m,H),d.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,1),new THREE.Vector3(t.x,t.y,t.z).normalize()),p.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,1),new THREE.Vector3(r.x,r.y,r.z).normalize()),o.add(d,p)}),o.name="flightLine_"+t,this.earthGroup.add(o)}getBezierCurveVPositions(e,t){const i=1.5*e.angleTo(t)/Math.PI/.1,r=.4*i,o=i*i*12,s=new THREE.Ray(new THREE.Vector3(0,0,0),e.clone().add(t.clone()).divideScalar(2)),a=s.at(o/s.at(1,new THREE.Vector3).distanceTo(new THREE.Vector3(0,0,0)),new THREE.Vector3);return[e,e.clone().lerp(a,r/e.clone().distanceTo(a)),t.clone().lerp(a,r/t.clone().distanceTo(a)),t]}lglt2xyz(e,t,i){const r=(90+e)*(Math.PI/180),o=(90-t)*(Math.PI/180);return i=this.option.cloud.show?i:this.option.cloud.show,(new THREE.Vector3).setFromSpherical(new THREE.Spherical(.1*this.option.earth.radius+i,o,r))}};