import*as THREE from"./build/three.module.js";import{Line2}from"./jsm/lines/Line2.js";import{LineGeometry}from"./jsm/lines/LineGeometry.js";import{LineMaterial}from"./jsm/lines/LineMaterial.js";import{FontLoader}from"./jsm/loaders/FontLoader.js";import{TextGeometry}from"./jsm/geometries/TextGeometry.js";import CenterPoint from"./CenterPoint.js";const textureNormal=(new THREE.TextureLoader).load("static/images/map/textureNormal.jpg"),calloutText=(new THREE.TextureLoader).load("static/images/map/callout.png");export default class ThreeMapV2Impl{constructor({domElement:e,mapName:t,mapData:o,option:i}){this.scene,this.camera,this.renderer,this.mapModel,this.projection,this.lonLatToMercatorData,this.option=i,this.mapData=o,this.mapName=t,this.domElement=e,this.gridHelperName="网格辅助",this.axesHelperName="坐标辅助",this.fontLoader=new FontLoader,this.lightBeamScatterSpeed=.02,this.flightLineSpeed=.1,this.waveMeshArr=[],this.flightLineTexture=(new THREE.TextureLoader).load("static/images/map/stroke3.png")}initMapBorderByGeoJson(e,t){const o=this.scene.getObjectByName("地图描边");o&&this.scene.remove(o);const i=new THREE.Group;i.name="地图描边",t.features.forEach(t=>{const o=t.geometry.coordinates,n=new THREE.Group;n.name=`区域组-${t.properties.name}`;const r=new THREE.Group;r.name="描边线段组",this.lonLatToVectorData=o.map(t=>{var o=!1;if(t=t.map((t,i)=>{if(t[i]instanceof Array){if(t=t.map(e=>e=this.lonLatToVector(e)),e.up.show){const o=this.initStrokedLineSegmentBorder(t,e.up);r.add(o)}if(e.down.show){const o=this.initStrokedLineSegmentBorder(t,e.down);o.position.set(0,0,this.option.depth||10),r.add(o)}}else o=!0,t=this.lonLatToVector(t);return t}),o){if(e.up.show){const o=this.initStrokedLineSegmentBorder(t,e.up);r.add(o)}if(e.down.show){const o=this.initStrokedLineSegmentBorder(t,e.down);o.position.set(0,0,this.option.depth||10),r.add(o)}}return t}),n.rotation.x=Math.PI,n.add(r),i.add(n)}),this.scene.add(i)}initStrokedLineSegmentBorder(e,t){const o=[];e.forEach(e=>o.push(e[0],e[1],0));const i=new LineGeometry;i.setPositions(new Float32Array(o));const n=new LineMaterial({transparent:!0,color:t.color,linewidth:t.width,opacity:t.opacity});n.resolution.set(this.domElement.offsetWidth,this.domElement.offsetHeight);const r=new Line2(i,n);return r.name="描边线段",r.computeLineDistances(),r}initMapByGeoJson(e){this.mapModel=new THREE.Group,this.mapModel.name="地图",e.features.forEach(e=>{const t=e.geometry.coordinates,o=new THREE.Group;o.name=`区域组-${e.properties.name}`;const i=new THREE.Group;i.name="地图板块组";const n=new THREE.Group;n.name="描边线段组";const r=new THREE.Group;r.name="标签文字组",this.option.label.show&&this.fontLoader.load("static/fonts/STSong_Regular.json",t=>{try{const o=new TextGeometry(e.properties.name,{font:t,size:.8,height:.1}),i=new THREE.MeshPhongMaterial({opacity:this.option.label.opacity||1,color:this.option.label.color||"#007cff",transparent:!0}),n=new THREE.Mesh(o,i),[a,s,p]=this.lonLatToVector(e.properties.center);n.position.set(a,s,p),n.name="标签",n.rotation.x=-Math.PI,r.add(n)}catch(e){console.warn("fontGroup","标签文字设置错误！！！")}}),this.lonLatToVectorData=t.map(e=>{var t=!1;if(e=e.map((e,o)=>{if(e[o]instanceof Array){e=e.map(e=>e=this.lonLatToVector(e)),i.add(this.initAreaTilesMesh(e));const t=this.initStrokedLineSegment(e),o=t.clone();o.position.set(0,0,this.option.depth||10),n.add(t,o)}else t=!0,e=this.lonLatToVector(e);return e}),t){i.add(this.initAreaTilesMesh(e));const t=this.initStrokedLineSegment(e),o=t.clone();o.position.set(0,0,this.option.depth||10),n.add(t,o)}return e}),o.rotation.x=Math.PI,o.add(i,n,r),this.mapModel.add(o)}),this.scene.add(this.mapModel)}initAreaTilesMesh(e){const t=new THREE.Shape;e.forEach((o,i)=>{const[n,r]=o;0===i?t.moveTo(n,r):i===e.length-1?t.quadraticCurveTo(n,r,n,r):t.lineTo(n,r,n,r)});const o=new THREE.ExtrudeGeometry(t,{depth:this.option.depth||10,bevelEnabled:!1}),i=new THREE.MeshPhongMaterial({color:this.option.area.color||"#007cff",opacity:this.option.area.opacity||.8,transparent:!0});this.option.area.normal.show&&(textureNormal.wrapS=textureNormal.wrapT=THREE.RepeatWrapping,textureNormal.repeat.set(this.option.area.normal.repeat,this.option.area.normal.repeat),i.normalMap=textureNormal,i.normalScale=new THREE.Vector2(this.option.area.normal.normalScale,this.option.area.normal.normalScale));const n=new THREE.Mesh(o,i);return n.name="区域板块",n}initStrokedLineSegment(e){const t=[];e.forEach(e=>t.push(e[0],e[1],0));const o=new LineGeometry;o.setPositions(new Float32Array(t));const i=new LineMaterial({transparent:!0,color:this.option.line.color||"#ffffff",linewidth:this.option.line.linewidth||1,opacity:this.option.line.opacity||.8});i.resolution.set(this.domElement.offsetWidth,this.domElement.offsetHeight);const n=new Line2(o,i);return n.name="描边线段",n.computeLineDistances(),n}lonLatToVector(e){const t=CenterPoint.find(e=>e.value==this.mapName);this.option.scale=t.scale,this.projection||(this.projection=d3.geoMercator().center(t.center).scale(this.option.scale).translate([0,0]));const[o,i]=this.projection([...e]);return[o,i,0]}initGridHelper(e){e&&(this.option.gridHelper=e),this.option.gridHelper.show&&this.openGridHelper(),this.option.gridHelper.show||this.closeGridHelper()}openGridHelper(){if(this.option.gridHelper.show){const e=this.option.gridHelper.width||300,t=this.option.gridHelper.height||300,o=this.option.gridHelper.xColor||16777215,i=this.option.gridHelper.yColor||16777215;this.option.gridHelper.material=this.option.gridHelper.material||{};const n=this.option.gridHelper.material.opacity||.5,r=this.option.gridHelper.material.transparent||!0,a=new THREE.GridHelper(e,t,o,i);a.material.opacity=n,a.material.transparent=r,a.name=this.gridHelperName,this.closeGridHelper(),this.scene.add(a)}}closeGridHelper(){const e=this.scene.getObjectByName(this.gridHelperName);e&&this.scene.remove(e)}initAxesHelper(e){e&&(this.option.axesHelper=e),this.option.axesHelper.show&&this.openAxesHelper(),this.option.axesHelper.show||this.closeAxesHelper()}openAxesHelper(){if(this.option.axesHelper.show){const e=this.option.axesHelper.size||100,t=new THREE.AxesHelper(e);t.name=this.axesHelperName,this.closeAxesHelper(),this.scene.add(t)}}closeAxesHelper(){const e=this.scene.getObjectByName(this.axesHelperName);e&&this.scene.remove(e)}setDrawBeamLight(e,t,{radius:o=1,baseHeight:i=.2,speed:n=.02,material:r}){const a=this.scene.getObjectByName("lightBeamScatter_"+t);a&&this.scene.remove(a),this.lightBeamScatterSpeed=n;const s=(r=r||{}).color||"red",p=r.opacity||1,l=(new THREE.TextureLoader).load(r.lightColumnTexture),h=(new THREE.TextureLoader).load(r.calloutTexture),c=(new THREE.TextureLoader).load(r.calloutApertureTexture),d=new THREE.Group;e.forEach(e=>{const[t,n,r]=this.lonLatToVector(e.value);const a=function(){const r=new THREE.PlaneGeometry(o,e.value[2]*i),a=new THREE.MeshBasicMaterial({map:l,color:s,opacity:p,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),h=new THREE.Mesh(r,a);return h.rotation.set(-Math.PI/2,0,0),h.position.set(t,n,-e.value[2]*i/2),h}(),m=function(){var e=new THREE.PlaneBufferGeometry(1,1),o=new THREE.MeshBasicMaterial({color:s,opacity:p,map:h,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),i=new THREE.Mesh(e,o);return i.scale.set(3,3,3),i.position.set(t,n,-.1),i}(),E=function(){var e=new THREE.PlaneBufferGeometry(1,1),o=new THREE.MeshBasicMaterial({color:s,opacity:p,map:c,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),i=new THREE.Mesh(e,o);return i.size=3,i.scale.set(3,3,3),i.position.set(t,n,-.1),i._s=1*Math.random()+1,i}();this.waveMeshArr.push(E),d.add(a,a.clone().rotateY(Math.PI/2),m,E)}),d.name="lightBeamScatter_"+t,d.rotation.x=Math.PI,this.scene.add(d)}setDrawFlightLine(e,t,o){const i=this.scene.getObjectByName("flightLine_"+t);i&&this.scene.remove(i),this.flightLineSpeed=o.line.speed;const n=new THREE.Group,r=new THREE.Group,a=new THREE.Group;e.forEach(e=>{const t=this.lonLatToVector(e.coords[0]),i=this.lonLatToVector(e.coords[1]);function n(e,t,{color:o,opacity:i,size:n}){var r=new THREE.PlaneBufferGeometry(1,1),a=new THREE.MeshBasicMaterial({color:o,opacity:i,map:calloutText,transparent:!0,side:THREE.DoubleSide,depthWrite:!1}),s=new THREE.Mesh(r,a);n=n;return s.scale.set(n,n,n),s.position.set(e,t,-.1),s}const s=function(e){e.wrapS=e.wrapT=THREE.RepeatWrapping,e.repeat.set(1,1),e.needsUpdate=!0;const n=new THREE.QuadraticBezierCurve3(new THREE.Vector3(t[0],0,t[1]),new THREE.Vector3(t[0]/2,20,0),new THREE.Vector3(i[0],0,i[1])),r=new THREE.TubeGeometry(n,o.line.twisty,o.line.width),a=new THREE.MeshBasicMaterial({map:e,color:o.line.color,opacity:o.line.opacity,side:THREE.DoubleSide,depthWrite:!1,transparent:!0}),s=new THREE.Mesh(r,a);return s.rotation.x=Math.PI/2,s}(this.flightLineTexture),p=n(t[0],t[1],{size:o.scatterStart.size,color:o.scatterStart.color,option:o.scatterStart.option}),l=n(i[0],i[1],{size:o.scatterEnd.size,color:o.scatterEnd.color,option:o.scatterEnd.option});a.add(p,l),a.rotation.x=Math.PI,r.add(s)}),n.name="flightLine_"+t,n.add(r,a),this.scene.add(n)}};